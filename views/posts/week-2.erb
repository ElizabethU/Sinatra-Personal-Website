date: 2013-11-09


Week 2 just ended and I feel like I've got so much more experience. We’ve been working on larger projects (though still fairly small), and I feel like things are really coming together. With so much practice all day every day I'm seeing patterns in what I've been doing, and learning better ways to organize different functions to avoid tripping myself up. I’m now using more, tiny functions is a way that I would have found obnoxious a week ago, but that I can now appreciate as making my code easier to read. I think a lot of my previous distaste for using many tiny functions was that it made errors hard to find, but now that I’ve developed better strategies for testing my code, learned to read error messages more productively, and frankly gotten enough experience to be writing fewer bugs, it’s nice to have a little boolean function tucked away somewhere so I can just put in a well named function instead.

My big triumph this week was a hangman game, which is fully functional and reads from a list of the thousand most common English words. I got to learn a lot about how Ruby deals with strings versus lists, and spent a long time combing through www.ruby-docs.org, and familiarized myself with a lot of methods to find something that could effectively tell the hangman game to hide all the non-guessed letters in the randomly chosen word, and to do it in just one line. I probably spent more time doing that then just figuring out a work around, but I’m now a lot more familiar with Ruby methods, and I’m totally not intimidated by the Ruby doc format, which I think has been a little overwhelming for some people.

Somewhere in there we all went to our first Ruby gathering: the Seattle Ruby Brigade. I think Kerri just wanted us to see her give a killer presentation on visualization. Really though, it was nice to meet so many people. We got to see several lightning talks by Code Fellows students and at first that was a little intimidating, hearing about how they made an app every day, and also with them being several weeks ahead of us. After their presentations, I was actually more inspired. None of their apps seemed that far ahead of where we are. I could see how we’ll get there once we start devoting time to Rails. That said, I’m really happy I’m in Ada, because we’ve been learning Ruby first, and I think that’s going to give me a stronger foundation. Whatever I’ve done, I’ve always produced good work that I could be proud of, but I’ve never been a super fast crank things out kind of person. My dad always said I did quality over quantity, and I think I’ve been seeing that in this program. Doing an entire app every day seems like it would be very strenuous, but maybe with less flexibility and time to explore side projects and questions, which is absolutely necessary for me. I really feel like my learning is enriched when I have time to lay a foundation and really explore things, and Ada is really providing that. That’s not a judgement call on any other program (How would I even make one? I don’t know Rails yet and have never been a part of any other code school!) just a knowledge of my own personal learning style and a few impressions.

Meanwhile, it’s like Github and I are at summer camp, and are doing trust falls. I feel like I understand what it does, and why it’s useful, but I don’t quite trust it not delete all my things and ask what I’m talking about. Like most things that people initially tell me are terrifying and complex, it feels pretty straight forward once you understand it. I hope to get more experience and familiarity with the commands this week, and also learn more about merging and how github decides whose code is taken in a merge.
